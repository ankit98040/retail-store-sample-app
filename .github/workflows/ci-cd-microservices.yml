name: Microservices CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force build all services'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  # Job to detect which services have changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      ui: ${{ steps.changes.outputs.ui }}
      catalog: ${{ steps.changes.outputs.catalog }}
      cart: ${{ steps.changes.outputs.cart }}
      checkout: ${{ steps.changes.outputs.checkout }}
      orders: ${{ steps.changes.outputs.orders }}
      any_changed: ${{ steps.changes.outputs.any_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            ui:
              - 'src/ui/**'
            catalog:
              - 'src/catalog/**'
            cart:
              - 'src/cart/**'
            checkout:
              - 'src/checkout/**'
            orders:
              - 'src/orders/**'
            any_changed:
              - 'src/**'

  # AWS Authentication and ECR Setup - runs first
  aws-setup:
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true' || github.event.inputs.force_build_all == 'true'
    runs-on: ubuntu-latest
    outputs:
      ecr-registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify AWS authentication
        run: |
          echo "✅ AWS authentication successful"
          echo "AWS Account ID: $(aws sts get-caller-identity --query Account --output text)"
          echo "AWS Region: ${{ env.AWS_REGION }}"
          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"

      - name: Create ECR repositories if they don't exist
        run: |
          services=("ui" "catalog" "cart" "checkout" "orders")
          for service in "${services[@]}"; do
            echo "Checking/Creating ECR repository for retail-store-${service}..."
            aws ecr describe-repositories --repository-names retail-store-${service} --region ${{ env.AWS_REGION }} 2>/dev/null || \
            aws ecr create-repository --repository-name retail-store-${service} --region ${{ env.AWS_REGION }} \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
            echo "✅ ECR repository retail-store-${service} is ready"
          done

  # Build and push Docker images for changed services
  build-and-push:
    needs: [detect-changes, aws-setup]
    if: needs.detect-changes.outputs.any_changed == 'true' || github.event.inputs.force_build_all == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: ui
            path: src/ui
            dockerfile: src/ui/Dockerfile
            build_args: ""
            changed: ${{ needs.detect-changes.outputs.ui }}
          - service: catalog
            path: src/catalog
            dockerfile: src/catalog/Dockerfile
            build_args: ""
            changed: ${{ needs.detect-changes.outputs.catalog }}
          - service: cart
            path: src/cart
            dockerfile: src/cart/Dockerfile
            build_args: ""
            changed: ${{ needs.detect-changes.outputs.cart }}
          - service: checkout
            path: src/checkout
            dockerfile: src/checkout/Dockerfile
            build_args: ""
            changed: ${{ needs.detect-changes.outputs.checkout }}
          - service: orders
            path: src/orders
            dockerfile: src/orders/Dockerfile
            build_args: ""
            changed: ${{ needs.detect-changes.outputs.orders }}
    
    steps:
      - name: Skip if no changes
        if: matrix.changed != 'true' && github.event.inputs.force_build_all != 'true'
        run: |
          echo "No changes detected for ${{ matrix.service }}, skipping build"
          exit 0

      - name: Checkout code
        if: matrix.changed == 'true' || github.event.inputs.force_build_all == 'true'
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: matrix.changed == 'true' || github.event.inputs.force_build_all == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials (reuse from aws-setup job)
        if: matrix.changed == 'true' || github.event.inputs.force_build_all == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR (reuse from aws-setup job)
        if: matrix.changed == 'true' || github.event.inputs.force_build_all == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        if: matrix.changed == 'true' || github.event.inputs.force_build_all == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/retail-store-${{ matrix.service }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        if: matrix.changed == 'true' || github.event.inputs.force_build_all == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.path }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Verify image push
        if: matrix.changed == 'true' || github.event.inputs.force_build_all == 'true'
        run: |
          echo "✅ Successfully pushed image for ${{ matrix.service }}"
          echo "Image: ${{ env.ECR_REGISTRY }}/retail-store-${{ matrix.service }}:latest"
          echo "Also tagged as: ${{ env.ECR_REGISTRY }}/retail-store-${{ matrix.service }}:main-${{ github.sha }}"
          
          # Verify the latest image exists in ECR
          echo "Verifying latest tag..."
          aws ecr describe-images \
            --repository-name retail-store-${{ matrix.service }} \
            --image-ids imageTag=latest \
            --region ${{ env.AWS_REGION }} \
            --query 'imageDetails[0].imageTags' \
            --output text
            
          # Also verify the SHA tag exists
          echo "Verifying SHA tag..."
          aws ecr describe-images \
            --repository-name retail-store-${{ matrix.service }} \
            --image-ids imageTag=main-${{ github.sha }} \
            --region ${{ env.AWS_REGION }} \
            --query 'imageDetails[0].imageTags' \
            --output text

  # Job to run tests for changed services
  test:
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: ui
            path: src/ui
            test_command: "./mvnw test"
            setup_command: "echo 'Setting up Java environment'"
            changed: ${{ needs.detect-changes.outputs.ui }}
          - service: catalog
            path: src/catalog
            test_command: "go test ./..."
            setup_command: "echo 'Setting up Go environment'"
            changed: ${{ needs.detect-changes.outputs.catalog }}
          - service: cart
            path: src/cart
            test_command: "./mvnw test"
            setup_command: "echo 'Setting up Java environment'"
            changed: ${{ needs.detect-changes.outputs.cart }}
          - service: checkout
            path: src/checkout
            test_command: "yarn test"
            setup_command: "yarn install --frozen-lockfile"
            changed: ${{ needs.detect-changes.outputs.checkout }}
          - service: orders
            path: src/orders
            test_command: "./mvnw test"
            setup_command: "echo 'Setting up Java environment'"
            changed: ${{ needs.detect-changes.outputs.orders }}

    steps:
      - name: Skip if no changes
        if: matrix.changed != 'true'
        run: |
          echo "No changes detected for ${{ matrix.service }}, skipping tests"
          exit 0

      - name: Checkout code
        if: matrix.changed == 'true'
        uses: actions/checkout@v4

      - name: Set up Java 21
        if: matrix.changed == 'true' && (matrix.service == 'ui' || matrix.service == 'cart' || matrix.service == 'orders')
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Set up Go
        if: matrix.changed == 'true' && matrix.service == 'catalog'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Node.js
        if: matrix.changed == 'true' && matrix.service == 'checkout'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: ${{ matrix.path }}/yarn.lock

      - name: Cache Maven dependencies
        if: matrix.changed == 'true' && (matrix.service == 'ui' || matrix.service == 'cart' || matrix.service == 'orders')
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache Go modules
        if: matrix.changed == 'true' && matrix.service == 'catalog'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup service dependencies
        if: matrix.changed == 'true'
        working-directory: ${{ matrix.path }}
        run: ${{ matrix.setup_command }}

      - name: Run tests
        if: matrix.changed == 'true'
        working-directory: ${{ matrix.path }}
        run: ${{ matrix.test_command }}

  # Job to update Helm chart values.yaml files with new image tags
  update-helm-charts:
    needs: [detect-changes, aws-setup, build-and-push, test]
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: ui
            changed: ${{ needs.detect-changes.outputs.ui }}
          - service: catalog
            changed: ${{ needs.detect-changes.outputs.catalog }}
          - service: cart
            changed: ${{ needs.detect-changes.outputs.cart }}
          - service: checkout
            changed: ${{ needs.detect-changes.outputs.checkout }}
          - service: orders
            changed: ${{ needs.detect-changes.outputs.orders }}
    
    steps:
      - name: Skip if no changes
        if: matrix.changed != 'true'
        run: |
          echo "No changes detected for ${{ matrix.service }}, skipping Helm chart update"
          exit 0

      - name: Checkout code
        if: matrix.changed == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        if: matrix.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update Helm chart values.yaml
        if: matrix.changed == 'true'
        run: |
          # Define the service and paths
          SERVICE="${{ matrix.service }}"
          VALUES_FILE="src/${SERVICE}/chart/values.yaml"
          NEW_IMAGE_TAG="latest"
          ECR_REPOSITORY="${{ env.ECR_REGISTRY }}/retail-store-${SERVICE}"
          
          echo "Updating Helm chart for service: ${SERVICE}"
          echo "Values file: ${VALUES_FILE}"
          echo "New image tag: ${NEW_IMAGE_TAG}"
          echo "ECR repository: ${ECR_REPOSITORY}"
          
          # Check if values.yaml exists
          if [ ! -f "${VALUES_FILE}" ]; then
            echo "Error: ${VALUES_FILE} not found!"
            exit 1
          fi
          
          # Backup the original file
          cp "${VALUES_FILE}" "${VALUES_FILE}.backup"
          
          # Update the image repository and tag in values.yaml
          # This uses yq to properly update YAML while preserving structure and comments
          # Install yq if not available
          if ! command -v yq &> /dev/null; then
            echo "Installing yq..."
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi
          
          # Update the image repository and tag
          yq eval ".image.repository = \"${ECR_REPOSITORY}\"" -i "${VALUES_FILE}"
          yq eval ".image.tag = \"${NEW_IMAGE_TAG}\"" -i "${VALUES_FILE}"
          
          # Verify the changes
          echo "Updated values.yaml content for image section:"
          yq eval '.image' "${VALUES_FILE}"
          
          # Show the diff
          echo "Changes made to ${VALUES_FILE}:"
          diff "${VALUES_FILE}.backup" "${VALUES_FILE}" || true
          
          # Clean up backup file
          rm "${VALUES_FILE}.backup"

      - name: Validate Helm chart
        if: matrix.changed == 'true'
        run: |
          SERVICE="${{ matrix.service }}"
          CHART_PATH="src/${SERVICE}/chart"
          
          # Install Helm if not available
          if ! command -v helm &> /dev/null; then
            echo "Installing Helm..."
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          fi
          
          # Validate the Helm chart
          echo "Validating Helm chart for ${SERVICE}..."
          helm lint "${CHART_PATH}"
          
          # Test template rendering
          echo "Testing Helm template rendering..."
          helm template "${SERVICE}" "${CHART_PATH}" --dry-run > /dev/null
          
          echo "✅ Helm chart validation successful for ${SERVICE}"

      - name: Create deployment summary
        if: matrix.changed == 'true'
        run: |
          SERVICE="${{ matrix.service }}"
          NEW_IMAGE_TAG="latest"
          ECR_REPOSITORY="${{ env.ECR_REGISTRY }}/retail-store-${SERVICE}"
          
          echo "## 🚀 Deployment Summary for ${SERVICE}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Service | \`${SERVICE}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Repository | \`${ECR_REPOSITORY}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Tag | \`${NEW_IMAGE_TAG}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Secondary Tag | \`main-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Helm Chart Path | \`src/${SERVICE}/chart/values.yaml\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit SHA | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes Made:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Updated image repository to ECR" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Updated image tag to latest" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Committed changes to repository" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Commit and push changes
        if: matrix.changed == 'true'
        run: |
          SERVICE="${{ matrix.service }}"
          VALUES_FILE="src/${SERVICE}/chart/values.yaml"
          
          # Check if there are any changes to commit
          if git diff --quiet "${VALUES_FILE}"; then
            echo "No changes to commit for ${SERVICE}"
            exit 0
          fi
          
          # Add and commit the changes
          git add "${VALUES_FILE}"
          git commit -m "chore: update ${SERVICE} Helm chart with latest image tag

          - Updated image repository to ${{ env.ECR_REGISTRY }}/retail-store-${SERVICE}
          - Updated image tag to latest (commit: ${{ github.sha }})
          - Auto-generated by GitHub Actions workflow"
          
          # Push the changes
          git push origin main
          
          echo "✅ Successfully updated Helm chart for ${SERVICE} service"

  # Notification job
  notify:
    needs: [detect-changes, aws-setup, build-and-push, test, update-helm-charts]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify on success
        if: needs.aws-setup.result == 'success' && needs.build-and-push.result == 'success' && needs.test.result == 'success' && (needs.update-helm-charts.result == 'success' || needs.update-helm-charts.result == 'skipped')
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "AWS authentication and ECR setup completed"
          echo "Services built and pushed to ECR"
          if [ "${{ needs.update-helm-charts.result }}" == "success" ]; then
            echo "Helm charts updated with new image tags"
          fi
          
      - name: Notify on failure
        if: needs.aws-setup.result == 'failure' || needs.build-and-push.result == 'failure' || needs.test.result == 'failure' || needs.update-helm-charts.result == 'failure'
        run: |
          echo "❌ Pipeline failed!"
          echo "Check the logs for more details"
          if [ "${{ needs.aws-setup.result }}" == "failure" ]; then
            echo "AWS setup job failed"
          fi
          if [ "${{ needs.build-and-push.result }}" == "failure" ]; then
            echo "Build and push job failed"
          fi
          if [ "${{ needs.test.result }}" == "failure" ]; then
            echo "Test job failed"
          fi
          if [ "${{ needs.update-helm-charts.result }}" == "failure" ]; then
            echo "Helm chart update job failed"
          fi
          exit 1
